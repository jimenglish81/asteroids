<!doctype html>
<html>
<head>
	<link href='http://fonts.googleapis.com/css?family=Audiowide' rel='stylesheet' type='text/css'>
	<style type="">
	body {
		margin: 0;
		padding: 0;
	}
	h1, h2 {
		font-family: 'Audiowide', cursive;
		position: absolute;
		left: 10px;
		color: #83f52c;
		text-shadow: 0px 0px 6px rgba(255,255,255,0.7);
		-webkit-animation: fadein 4s;
		font-size: 180%;
	}
	#score {
		left: auto;
		right: 10px;
	}
	@-webkit-keyframes fadein {
	    from {
	        opacity:0;
	    }
	    to {
	        opacity:1;
	    }
	}
	</style>
</head>
<body>
	<h1>Space Game</h1>
	<h2 id="score"></h2>
<script>
	// create canvas
	var canvas = document.createElement('canvas');
	var ctx = canvas.getContext('2d');
	var width = innerWidth;
	var height = innerHeight;
	var dScore = document.getElementById('score');
	var asteroidCollection = [];

	document.body.appendChild(canvas);
	
	canvas.width = width;
	canvas.height = height;
	
	// ship class
	function Ship(position, velocity, size, angle, fillColor, strokeColor, shadowColor) {
		this._position = position;
		this._velocity = velocity;
		this._angleVelocity = 0;
		this._size = size;
		this._angle = angle;
		this._fillColor = fillColor;
		this._strokeColor = strokeColor;
		this._shadowColor = shadowColor;
		this._missileCollection = [];
	}
	
	Ship.prototype.draw = function(context) {
		//TODO - cache
		var carDim = this._size,
			carX = this._position[0],
			carY = this._position[1];
			
		context.save();
		context.translate(carX + (carDim * .5), carY + (carDim * .5));
		context.rotate(this._angle);
		context.translate( -(carX + (carDim * .5)), -(carY + (carDim * .5)) );
		
		context.beginPath();
		context.moveTo(carX + (carDim * .2), carY);
		context.lineTo(carX + (carDim), carY + (carDim * .5));
		context.lineTo(carX + (carDim * .2), carY + (carDim));
		context.lineTo(carX + (carDim * .2), carY + (carDim * .8));
		context.lineTo(carX, carY + (carDim * .9));
		context.lineTo(carX, carY + (carDim * .1));
		context.lineTo(carX + (carDim * .2), carY + (carDim * .2));
		context.lineTo(carX + (carDim * .2), carY);

		context.closePath();
		context.fillStyle = this._fillColor;
		context.strokeStyle = this._strokeColor;
		context.shadowColor = this._shadowColor;
		context.shadowBlur = carDim * .35;
		context.stroke();
		context.fill();
		
		context.restore();
	};
	Ship.prototype.thrust = function(thrust) {
		this._thrust = thrust;
	};
	Ship.prototype.toString = function() {
		
	};
	Ship.prototype.update = function() {
		this._angle += this._angleVelocity;

		this._position[0] = (this._position[0] + this._velocity[0]) % width;
		this._position[1] = (this._position[1] + this._velocity[1]) % height;
		if (this._position[0] + (this._size * .5) < 0) {
			this._position[0] = width;
		}
		
		if (this._position[1] + (this._size * .5) < 0) {
			this._position[1] = height;
		}
		
		
		var c = 0.06;
		this._velocity[0] *= (1-c);
		this._velocity[1] *= (1-c);
        
        var forward = [Math.cos(this._angle), Math.sin(this._angle)];

		if (this._thrust) {
			this._velocity[0] += forward[0];
		    this._velocity[1] += forward[1];
		}
	};
	
	Ship.prototype.fire = function() {
		var x = ((this._position[0] + (this._size * .5)) + (this._size * .5) * Math.cos(this._angle)),
			y = ((this._position[1] + (this._size * .5)) + (this._size * .5) * Math.sin(this._angle)),
			forward = [Math.cos(this._angle), Math.sin(this._angle)],
			vel_x = this._velocity[0] + forward[0] * 3,
		    vel_y = this._velocity[1] + forward[1] * 5;
		
		this._missileCollection.push(new Missile([x, y], [vel_x, vel_y], this._size * .1, this._fillColor, this._strokeColor, this._shadowColor));
	};
	
	Ship.prototype.getMissileCollection = function() {
		return this._missileCollection;
	};
	
	// asteroid class
	function Asteroid(position, velocity, size, angle, sides, fillColor, strokeColor, shadowColor, isBig) {
		this._position = position;
		this._velocity = velocity;
		this._angleVelocity = Math.random() / 10;
		this._size = size;
		this._angle = angle;
		this._sides = sides;
		this._fillColor = fillColor;
		this._strokeColor = strokeColor;
		this._shadowColor = shadowColor;
		this._isBig = isBig;
	}
	
	Asteroid.prototype.draw = function(context) {
		var astX = this._position[0],
			astY = this._position[1],
			astDim = this._size / 2;
		
		context.save();
		context.translate(astX, astY);
		context.rotate(this._angle);
		context.translate( -(astX), -(astY));
		
		
		var angle = (Math.PI * 2) / this._sides;
		var angleDelta = angle;
		
		context.lineCap = 'round';
		context.lineJoin = 'round'
		context.beginPath();
		context.moveTo(this._position[0] + astDim * Math.cos(angleDelta), this._position[1] + astDim * Math.sin(angleDelta));
		for (var i = 0; i < this._sides; i++) {
			context.lineTo(this._position[0] + astDim * Math.cos(angleDelta), this._position[1] + astDim * Math.sin(angleDelta));
			angleDelta += angle;
		}
		context.lineTo(this._position[0] + astDim * Math.cos(angleDelta), this._position[1] + astDim * Math.sin(angleDelta));
		
		context.fillStyle = this._fillColor;
		context.strokeStyle = this._strokeColor;
		context.shadowColor = this._shadowColor;
		context.shadowBlur = this._size * .35;
		context.stroke();
		context.fill();
		context.closePath();
				
		context.restore();
	};
	
	Asteroid.prototype.update = function() {
		this._angle += this._angleVelocity;

		this._position[0] = (this._position[0] + this._velocity[0]) % width;
		this._position[1] = (this._position[1] + this._velocity[1]) % height;
		if (this._position[0] + (this._size * .5) < 0) {
			this._position[0] = width;
		}

		if (this._position[1] + (this._size * .5) < 0) {
			this._position[1] = height;
		}
	};
	
	// missile class
	function Missile(position, velocity, size, fillColor, strokeColor, shadowColor) {
		this._position = position;
		this._velocity = velocity;
		this._size = size;
		this._fillColor = fillColor;
		this._strokeColor = strokeColor;
		this._shadowColor = shadowColor;
		this._lifeSpan = 1000;
		this._created = new Date();
	}
	
	Missile.prototype.draw = function(context) {
		context.beginPath();
	    context.arc(this._position[0], this._position[1], this._size * .5, 0, Math.PI * 1.9, false);
	    context.fillStyle = this._fillColor;
		context.strokeStyle = this._strokeColor;
		context.shadowColor = this._shadowColor;
		context.shadowBlur = this._size * .35;
		context.closePath();
		context.fill();
		context.stroke();
	};
	
	Missile.prototype.update = function() {
		this._position[0] = (this._position[0] + this._velocity[0]) % width;
		this._position[1] = (this._position[1] + this._velocity[1]) % height;
		if (this._position[0] + (this._size * .5) < 0) {
			this._position[0] = width;
		}

		if (this._position[1] + (this._size * .5) < 0) {
			this._position[1] = height;
		}
		if (new Date() - this._created > this._lifeSpan) {
			this.dead = true;
		}
	};
	
	// add events		
	window.addEventListener('keydown', function(evt) {
		var key = evt.keyCode;
	    if (key == 39) {
	        ship._angleVelocity = 0.1;
	    } else if (key == 37) {
	        ship._angleVelocity = -0.1;
	    } else if (key == 38) {
	        ship.thrust(true);
		}
		evt.preventDefault();
	}, false);
	
	window.addEventListener('keyup', function(evt) {
		var key = evt.keyCode;
	    if (key == 39 || key == 37) {
			ship._angleVelocity = 0; // Boolean
	    } else if (key == 38) {
	        ship.thrust(false);
		} else if (key == 32) {
			ship.fire();
		}
		evt.preventDefault();
	}, false);
	
	// create pieces
	var ship = new Ship([80, 80], [0, 0], innerHeight * .08, 0, '#00c5ff', '#00c5ff', '#00c5ff');
	var missile;
	var j = 0;
	function createAsteroid() {	
		var color = j % 2 ? '#ff0099' : '#f3f315';
		asteroidCollection.push(new Asteroid([Math.ceil(Math.random() * width), Math.ceil(Math.random() * height)], [Math.random(), Math.random()], height * .1, Math.random() / 10, Math.ceil(Math.random() * 10) + 2, color, color, color, true));
		j++;
	}
	createAsteroid();
	
	// physics loop
	(function() {
		var missileCollection = ship.getMissileCollection().slice();
		missileCollection.forEach(function(missile, index) {
			missile.update();
			if (missile.dead) {
				ship.getMissileCollection().splice(index, 1);
			}
		});
		ship.update();
		asteroidCollection.slice().forEach(function(asteroid, index) {
			if (!asteroid.dead) {
				asteroid.update();
			} else {
				asteroidCollection.splice(index, 1);
				if (asteroid._isBig) {
					createAsteroid();
				}
			}
		});
		var asteroidClone = asteroidCollection.slice();
		for(var i=0; i < missileCollection.length; i++) {
			var o1 = missileCollection[i];   
			for (var k=0; k < asteroidClone.length; k++) {     
				var o2 = asteroidClone[k];
				var deltax = o1._position[0] - o2._position[0];
				var deltay = o1._position[1] - o2._position[1];
				var dist = deltax * deltax + deltay * deltay;
				var radii = (o1._size / 2) + (o2._size / 2);

				if (dist > radii * radii) {
					continue;
				}
				// [Math.cos(this._angle), Math.sin(this._angle)]
				if (o2._isBig) {
					asteroidCollection.push(new Asteroid(o2._position.slice(), [-o2._velocity[0], o2._velocity[1]], o2._size * .25, Math.random() / 10, o2._sides, o2._fillColor, o2._fillColor, o2._fillColor, false));
					asteroidCollection.push(new Asteroid(o2._position.slice(), [o2._velocity[0], -o2._velocity[1]], o2._size * .25, Math.random() / 10, o2._sides, o2._fillColor, o2._fillColor, o2._fillColor, false));
					asteroidCollection.push(new Asteroid(o2._position.slice(), [o2._velocity[0], o2._velocity[1]], o2._size * .25, Math.random() / 10, o2._sides, o2._fillColor, o2._fillColor, o2._fillColor, false));
					asteroidCollection.push(new Asteroid(o2._position.slice(), [-o2._velocity[0], -o2._velocity[1]], o2._size * .25, Math.random() / 10, o2._sides, o2._fillColor, o2._fillColor, o2._fillColor, false));
				}
				o1.dead = o2.dead = true;
			}
		}
		
		// score stuff
		dScore.innerHTML = 'score: ' + (j - 1);
		setTimeout(arguments.callee, 1000 / 60);
	}());
	
	// game loop
	(function() {
		var missileCollection = ship.getMissileCollection().slice();
		canvas.width = width;
		ctx.fillStyle = '#000';
		ctx.fillRect(0, 0, width, height);
		
		ship.draw(ctx);
		asteroidCollection.forEach(function(asteroid, index) {
			asteroid.draw(ctx);
		});

		missileCollection.forEach(function(missile, index) {
			missile.draw(ctx);
		});
	
		requestAnimationFrame(arguments.callee);
	}());
	
</script>
</body>
</html>